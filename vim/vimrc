" Download and install vim-plug
if empty(glob('~/.dotfiles/vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source ~/.vimrc
endif

function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

set nocompatible

call plug#begin('~/.dotfiles/vim/vundle') 

Plug 'mileszs/ack.vim'
Plug 'w0rp/ale'
Plug 'ctrlpvim/ctrlp.vim', Cond(!has('nvim'))
Plug 'davidhalter/jedi-vim'
Plug 'Valloric/ListToggle'
Plug 'fholgado/minibufexpl.vim'
Plug 'scrooloose/nerdtree'
Plug 'klen/python-mode'
Plug 'ervandew/supertab'
Plug 'majutsushi/tagbar'
Plug 'tomtom/tcomment_vim'
Plug 'Chiel92/vim-autoformat'
Plug 'altercation/vim-colors-solarized'
Plug 'svermeulen/vim-easyclip'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'szw/vim-maximizer'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'janko-m/vim-test'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-unimpaired'
Plug 'benmills/vimux'
Plug 'terryma/vim-expand-region'
Plug 'vim-airline/vim-airline', Cond(has('nvim'))
Plug 'vim-airline/vim-airline-themes', Cond(has('nvim'))
Plug 'Shougo/deoplete.nvim', has('nvim') ? {'do': 'UpdateRemotePlugins'} : { 'on': [] } 
Plug 'zchee/deoplete-jedi', Cond(has('nvim'))
Plug 'Shougo/denite.nvim', has('nvim') ? {'do': 'UpdateRemotePlugins'} : { 'on': [] } 

call plug#end()

set t_Co=256

syntax on
filetype plugin indent on
syntax enable

set background=dark
colo solarized

set nu
set hlsearch
set incsearch

set ignorecase
set smartcase
set title
set hidden

set backspace=indent,eol,start

let mapleader=','
let maplocalleader='\'

" automatically change window's cwd to file's dir
set autochdir

" got this from gitgutter config
set updatetime=250

set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

augroup my_filetypes
    autocmd!
    autocmd Filetype python setlocal ts=4 ts=4 sw=4 sts=4 expandtab completeopt-=preview
    autocmd Filetype php setlocal ts=2 ts=2 sw=2 sts=2 expandtab
    autocmd Filetype javascript setlocal ts=2 ts=2 sw=2 sts=2 expandtab
    
    " django html highlighting
    " au BufNewFile,BufRead *.html set filetype=htmldjango
    autocmd BufNewFile,BufRead *.jinja2 set filetype=htmljinja
    autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags noci
    autocmd FileType html,jinja2 set omnifunc=htmlcomplete#CompleteTags noci
    autocmd Filetype html,htmljinja setlocal ts=2 ts=2 sw=2 sts=2 expandtab
augroup END

set foldmethod=indent
set foldignore=
set foldenable
set foldlevel=99
let g:DisableAutoPHPFolding = 1
"
" Press Space to turn off highlighting and clear any message already displayed.
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" Copy to 'clipboard registry'
vnoremap <C-c> "*y
" Select all text
nnoremap <C-a> ggVG

set clipboard=unnamed

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" Smart way to move between windows
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l
"
"insert a new line in normal mode
nnoremap <S-Enter> O<Esc>
"quickfix window and location list
"From ListToggle Plugin
"use <leader>l or q to toggle the location or quick fix winodows 
" From unimpaired plugin
" Use ]q [q [Q ]Q
" ]l [l ]L [L

"move swap files to vim tmp directories
set backupdir=~/.vim/tmp/backup_files//
set directory=~/.vim/tmp/swap_files//
set undodir=~/.vim/tmp/undo_files//

nnoremap <silent> <leader>vo :e $MYVIMRC<CR>
nnoremap <silent> <leader>vs :so $MYVIMRC<CR>

"----------------------------------------------------------
"PLUGINS
"---------------------------------------------------------
"
"NerdTREE
"
map <Leader>nt :NERDTreeToggle<CR>
augroup nerdtree
    autocmd!
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
augroup END
"
"maximizer
"
nnoremap <silent><F3> :MaximizerToggle<CR>
vnoremap <silent><F3> :MaximizerToggle<CR>gv
inoremap <silent><F3> <C-o>:MaximizerToggle<CR> 

"Jedi
if !has('nvim')
    let g:jedi#show_call_signatures = 0
    let g:jedi#use_tabs_not_buffers = 0
else
    let g:jedi#completions_enabled = 0
    let g:deoplete#enable_at_startup = 1
endif

"Python-Mode
"turn off rope from python mode. Conflict with jedi-vim
let g:pymode_rope = 0
let ropevim_vim_completion = 0

" 
" "pymode options
let g:pymode_lint = 0
let g:pymode_lint_write = 0
let g:pymode_lint_on_write = 0
let g:pymode_lint_checkers = ['pyflakes', 'pep8']
" let g:pymode_lint_ignore = "W,E226,E501,E225,E231,E228,E251,C0326,C011"
" let g:pymode_lint_sort = ['E', 'C', 'I']
let g:pymode_lint_cwindow = 1
let g:pymode_folding = 0
let g:pymode_motion = 1
let g:pymode_virtualenv = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all
let g:pymode_virtualenv_path = $VIRTUAL_ENV
let g:pymode_lint_message = 1

" Ale config
nmap <silent> <localleader>k <Plug>(ale_previous_wrap)
nmap <silent> <localleader>j <Plug>(ale_next_wrap)

let g:ale_linters = {'python': ['flake8'],}
let g:ale_type_map = {'flake8': {'ES': 'WS'}}
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_sign_info = '--'
let g:ale_sign_style_error = '--'
let g:ale_sign_style_warning = '--'


" Close location window also with :bd
" nnoremap <silent> <C-d> :lclose<CR>:bdelete<CR>
cabbrev <silent> bd <C-r>=(getcmdtype()==#':' && getcmdpos()==1 ? 'lclose\|bdelete' : 'bd')<CR>


" Autoformatter
" nnoremap <leader>= :Autoformat<CR>
vnoremap = :Autoformat<CR>
let g:formatters_python = ['yapf']

" Git Gutter
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk

map ih <Plug>GitGutterTextObjectInnerPending
omap ah <Plug>GitGutterTextObjectOuterPending
xmap ih <Plug>GitGutterTextObjectInnerVisual
xmap ah <Plug>GitGutterTextObjectOuterVisual

" Easy Clip
" Clash between m (d without redirecting to black hole) and setting a mark
" Now to set a mark use gm
nnoremap gm m
"
" using s to substitute
let g:EasyClipUseSubstituteDefaults = 1
let g:EasyClipAutoFormat = 1
nmap <leader>cf <plug>EasyClipToggleFormattedPaste
" Paste in insert mode with c-v
imap <c-v> <plug>EasyClipInsertModePaste
cmap <c-v> <plug>EasyClipCommandModePaste

let g:EasyClipUsePasteToggleDefaults = 0

nmap <c-f> <plug>EasyClipSwapPasteForward

"minibuf exproler <leader>mbe to open
let g:miniBufExplCycleArround = 1
map <Leader>mbe :MBEOpen<cr>
map <Leader>mbc :MBEClose<cr>
map <Leader>mbt :MBEToggle<cr>

map <Leader><TAB> :MBEbf<CR>

map <Leader>1 :MBEbn<CR>
map <Leader>2 :MBEbp<CR>

"ctrlP
set wildignore+=*.pyc
set wildignore+=**/*egg*
if !has('nvim')
    nnoremap <silent><c-b> :CtrlPBuffer<CR>
endif

"fugitive helper functions
augroup my_fugitive
    autocmd!
    autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END

" nnoremap \ :Ggrep<SPACE> <C-R><C-W>
nnoremap <Leader>sg :Ggrep <C-R><C-W><CR><CR>

set laststatus=2 "always show the status line
if !has('nvim')
    "powerline setup. Requires pip install powerline-status
    python import sys, os
    python sys.path.append(os.path.join(os.environ['HOME'], '.config/powerline/segments'))
    python from powerline.vim import setup as powerline_setup
    python powerline_setup()
    python del powerline_setup
else
    function! AirlineInit()
        let g:airline_section_z = airline#section#create(['%1p%%', '  î‚¡', 'linenr', ':%v'])
        let g:airline_symbols.linenr = ''
    endfunction
    autocmd User AirlineAfterInit call AirlineInit()

    let g:airline_powerline_fonts = 1 
    let g:airline_theme='powerlineish'
    let g:airline_skip_empty_sections = 1
    let g:airline#extensions#hunks#non_zero_only = 1
    let g:airline#extensions#whitespace#enabled = 0
    let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
    let g:airline#extensions#virtualenv#enabled = 1
    let g:airline#extensions#wordcount#enabled = 0
endif


" denite
if has('nvim')
    call denite#custom#var('file_rec', 'command',
                \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])

    " Ag command on grep source
    call denite#custom#var('grep', 'command', ['ag'])
    " only for old versions of ag
    call denite#custom#var('grep', 'default_opts',
                \ ['-i', '--column'])
    " call denite#custom#var('grep', 'default_opts',
    "             \ ['-i', '--vimgrep'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])

    call denite#custom#alias('source', 'file_rec/git', 'file_rec')
    call denite#custom#var('file_rec/git', 'command',
                \ ['git', 'ls-files', '-co', '--exclude-standard'])

    call denite#custom#map(
                \ 'insert',
                \ '<C-j>',
                \ '<denite:move_to_next_line>',
                \ 'noremap'
                \)

    call denite#custom#map(
                \ 'insert',
                \ '<C-k>',
                \ '<denite:move_to_previous_line>',
                \ 'noremap'
                \)

    call denite#custom#map(
                \ 'insert',
                \ '<C-v>',
                \ '<denite:do_action:vsplit>',
                \ 'noremap'
                \)

    call denite#custom#map(
                \ 'normal',
                \ 'v',
                \ '<denite:do_action:vsplit>',
                \ 'noremap'
                \)

    call denite#custom#map(
                \ 'insert',
                \ '<C-p>',
                \ '<denite:do_action:preview>',
                \ 'noremap'
                \)

    call denite#custom#map(
                \ 'insert',
                \ '<C-y>',
                \ '<denite:do_action:yank>',
                \ 'noremap'
                \)

    let s:menus = {}

    let s:menus.dotfiles = {
                \ 'description': 'Edit your import zsh configuration'
                \ }
    let s:menus.dotfiles.file_candidates = [
                \ ['zshrc', '~/.dotfiles/zsh/.zshrc'],
                \ ['zshenv', '~/.zshenv'],
                \ ['vim', '~/.dotfiles/vim/vimrc'],
                \ ['nvim', '~/.config/nvim/init.vim'],
                \ ]
    call denite#custom#var('menu', 'menus', s:menus)

    nnoremap <silent> <C-p> :<C-u>DeniteProjectDir file_rec<CR>
    nnoremap <silent> <C-f> :<C-u>Denite file_rec<CR>
    nnoremap <silent> <C-b> :<C-u>Denite buffer<CR>
    nnoremap <silent> <C-g> :<C-u>DeniteProjectDir -no-empty -mode=normal grep:::<C-R><C-W><CR>
    nnoremap <silent> <Leader>z :<C-u>Denite menu:dotfiles<CR>
    nnoremap <silent> <Leader>/ :<C-u>Denite line<CR>
    nnoremap <silent> <Leader>\ :<C-u>DeniteProjectDir -mode=normal grep<CR>
    nnoremap <silent> <Leader>* :<C-u>Denite -mode=normal -auto-highlight=true line -input=<C-R><C-W><CR>

    highlight link deniteMatchedChar WarningMsg
    highlight link deniteMatchedRange None
endif

nmap <F8> :TagbarToggle<CR> 


"vimux
map <Leader>tr :call VimuxRunCommand("clear; trial " . expand("%:p"))<CR>
map <Leader>trl :call VimuxRunCommand("!! \n")<CR>

" Ack vim with Ag
if executable('ag')
    let g:ackprg = 'ag --vimgrep'
    let g:ackprg = 'git grep -n'
endif

let g:ackhighlight = 1
nmap <Leader>ss :Ack! <C-R><C-W> <CR>

" vim test
nmap <silent> <leader>tt :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>ta :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tg :TestVisit<CR>
let test#strategy = "vimux"
let test#python#runner = 'nose'
let test#python#nose#options = '-s'

" -----------------------------------
"  Misc
"  ----------------------------------

" open quickfix window after grep commands
augroup my_quickfix_window
    autocmd!
    autocmd QuickFixCmdPost *grep* cwindow
augroup END

"<ctrl-s> for saving
noremap <silent> <C-S>          :update<CR>
vnoremap <silent> <C-S>         <C-C>:update<CR>
inoremap <silent> <C-S>         <ESC><C-C>:update<CR><ESC>


"Ale powerline
function! AleLinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error
    let l:all_non_errors = l:counts.total - l:counts.error

    return l:counts.total == 0 ? 'OK' : [all_errors, all_non_errors]
endfunction


"vim expand region
map <localleader>e <Plug>(expand_region_expand)
map <localleader>s <Plug>(expand_region_shrink)

let g:expand_region_text_objects = {
      \ 'iw'  :0,
      \ 'iW'  :0,
      \ 'i"'  :0,
      \ 'i''' :0,
      \ 'i]'  :1,
      \ 'ib'  :1,
      \ 'iB'  :1,
      \ }

call expand_region#custom_text_objects({
      \ 'a]' :1,
      \ 'ab' :1,
      \ 'aB' :1,
      \ })

call expand_region#custom_text_objects('python', {
      \ 'iM' :0,
      \ 'aM' :0,
      \ 'iC' :0,
      \ 'aC' :0
      \ })

"supertab
let g:SuperTabDefaultCompletionType = "<c-n>"
