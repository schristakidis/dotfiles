" Download ands install vim-plug
if empty(glob('~/.dotfiles/vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source ~/.vimrc
endif

function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

set nocompatible

call plug#begin('~/.dotfiles/vim/vundle') 

Plug 'dense-analysis/ale'
Plug 'Valloric/ListToggle'
Plug 'fholgado/minibufexpl.vim'
Plug 'scrooloose/nerdtree'
Plug 'tomtom/tcomment_vim'
Plug 'Chiel92/vim-autoformat'
Plug 'lifepillar/vim-solarized8'
Plug 'svermeulen/vim-easyclip'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'szw/vim-maximizer'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'janko-m/vim-test'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-unimpaired'
Plug 'benmills/vimux'
Plug 'terryma/vim-expand-region'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'Shougo/denite.nvim', has('nvim') ? {'do': 'UpdateRemotePlugins'} : { 'on': [] } 
Plug 'fatih/vim-go'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'vimwiki/vimwiki', { 'branch': 'dev' }
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
Plug 'machakann/vim-highlightedyank', Cond(has('nvim'))
Plug 'bronson/vim-visual-star-search'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'dhruvasagar/vim-table-mode'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'morhetz/gruvbox'
Plug 'mhartington/oceanic-next'
Plug 'ryanoasis/vim-devicons'
Plug 'vim-python/python-syntax'
Plug 'liuchengxu/vista.vim'
Plug 'Shougo/echodoc.vim'

call plug#end()

set termguicolors
set t_Co=256

syntax on
filetype plugin indent on
syntax enable

" let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
" let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set background=dark

augroup my_colours
      autocmd!
        autocmd ColorScheme solarized8 hi SpellBad cterm=underline
augroup END

" colo solarized8
" hi Quote ctermbg=109 guifg=#83a598
colo OceanicNext
" colo gruvbox

set nu
set hlsearch
set incsearch

set ignorecase
set smartcase
set title
set hidden

set backspace=indent,eol,start

if has('nvim')
    set inccommand=nosplit
endif

let mapleader=','
let maplocalleader=';'

" automatically change window's cwd to file's dir
set autochdir

" got this from gitgutter config
set updatetime=250

set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

augroup my_filetypes
    autocmd!
    autocmd Filetype python setlocal ts=4 ts=4 sw=4 sts=4 expandtab completeopt-=preview colorcolumn=80
    autocmd Filetype php setlocal ts=2 ts=2 sw=2 sts=2 expandtab
    autocmd Filetype javascript setlocal ts=2 ts=2 sw=2 sts=2 expandtab
    
    " django html highlighting
    " au BufNewFile,BufRead *.html set filetype=htmldjango
    autocmd BufNewFile,BufRead *.jinja2 set filetype=htmljinja
    autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags noci
    autocmd FileType html,jinja2 set omnifunc=htmlcomplete#CompleteTags noci
    autocmd Filetype html,htmljinja setlocal ts=2 ts=2 sw=2 sts=2 expandtab
    
    autocmd BufNewFile,BufReadPost *.md set filetype=markdown
    " autocmd BufRead,BufNewFile *.md setlocal spell
augroup END

set foldmethod=indent
set foldignore=
set foldenable
set foldlevel=99
let g:DisableAutoPHPFolding = 1
"
" Press Space to turn off highlighting and clear any message already displayed.
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>


" CLIPBOARD

set clipboard=unnamed
"
" Copy to primary registry'
vnoremap <C-c> "*y
" Select all text
nnoremap <C-a> ggVG

if has('nvim')
    noremap <A-p> "+p
    vnoremap <A-y> "+y
endif

" Easy Clip
" Clash between m (d without redirecting to black hole) and setting a mark
" Now to set a mark use gm
nnoremap gm m
"
" using s to substitute
let g:EasyClipUseSubstituteDefaults = 1
let g:EasyClipAutoFormat = 1
nmap <leader>cf <plug>EasyClipToggleFormattedPaste
" Paste in insert mode with c-v
imap <c-v> <plug>EasyClipInsertModePaste
cmap <c-v> <plug>EasyClipCommandModePaste

let g:EasyClipUsePasteToggleDefaults = 0

nmap <c-f> <plug>EasyClipSwapPasteForward


" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" Smart way to move between windows
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l

" close scratch buferr
noremap <C-q> <C-W>z

"
"insert a new line in normal mode
nnoremap <S-Enter> O<Esc>
"quickfix window and location list
"From ListToggle Plugin
"use <leader>l or q to toggle the location or quick fix winodows 
" From unimpaired plugin
" Use ]q [q [Q ]Q
" ]l [l ]L [L

"move swap files to vim tmp directories
set backupdir=~/.vim/tmp/backup_files//
set directory=~/.vim/tmp/swap_files//
set undodir=~/.vim/tmp/undo_files//

nnoremap <silent> <leader>vo :e $MYVIMRC<CR>
nnoremap <silent> <leader>vs :so $MYVIMRC<CR>

"----------------------------------------------------------
"PLUGINS
"---------------------------------------------------------
"
"NerdTREE
"
map <Leader>nt :NERDTreeToggle<CR>
augroup nerdtree
    autocmd!
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
augroup END
"
"maximizer
"
nnoremap <silent><F3> :MaximizerToggle<CR>
vnoremap <silent><F3> :MaximizerToggle<CR>gv
inoremap <silent><F3> <C-o>:MaximizerToggle<CR> 

let g:python_highlight_all = 1
let g:python_highlight_func_calls = 0

" Ale config
nmap <silent> <localleader>h <Plug>(ale_previous_wrap)
nmap <silent> <localleader>l <Plug>(ale_next_wrap)

let g:ale_linters = {'python': ['flake8'],}
let g:ale_type_map = {'flake8': {'ES': 'WS'}}
let g:ale_sign_error = '⤫'
let g:ale_sign_warning = '⚠'
let g:ale_sign_info = '--'
let g:ale_sign_style_error = '--'
let g:ale_sign_style_warning = '--'
let g:ale_echo_cursor = 1
"

" Close location window also with :bd
" nnoremap <silent> <C-d> :lclose<CR>:bdelete<CR>
cabbrev <silent> bd <C-r>=(getcmdtype()==#':' && getcmdpos()==1 ? 'lclose\|bdelete' : 'bd')<CR>


" Autoformatter
" nnoremap <leader>= :Autoformat<CR>
vnoremap = :Autoformat<CR>
let g:formatters_python = ['yapf']

" Git Gutter
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)

map ih <Plug>GitGutterTextObjectInnerPending
omap ah <Plug>GitGutterTextObjectOuterPending
xmap ih <Plug>GitGutterTextObjectInnerVisual
xmap ah <Plug>GitGutterTextObjectOuterVisual

" "minibuf exproler <leader>mbe to open
let g:miniBufExplCycleArround = 1
map <Leader>mbe :MBEOpen<cr>
map <Leader>mbc :MBEClose<cr>
map <Leader>mbt :MBEToggle<cr>

map <Leader><TAB> :MBEbf<CR>

map <Leader>1 :MBEbn<CR>
map <Leader>2 :MBEbp<CR>

"ctrlP
set wildignore+=*.pyc
set wildignore+=**/*egg*
if !has('nvim')
    nnoremap <silent><c-b> :CtrlPBuffer<CR>
endif

"fugitive helper functions
augroup my_fugitive
    autocmd!
    autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END

" nnoremap \ :Ggrep<SPACE> <C-R><C-W>
nnoremap <Leader>sg :Ggrep <C-R><C-W><CR><CR>

set laststatus=2 "always show the status line

function! AirlineInit()
    let g:airline_section_z = airline#section#create(['%1p%%', '  ', 'linenr', ':%v'])
    let g:airline_symbols.linenr = ''
endfunction
autocmd User AirlineAfterInit call AirlineInit()

let g:airline_powerline_fonts = 1 
let g:airline_theme='powerlineish'
let g:airline#extensions#vista#enabled = 1
let g:airline_skip_empty_sections = 1
let g:airline#extensions#hunks#non_zero_only = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline#extensions#virtualenv#enabled = 1
let g:airline#extensions#wordcount#enabled = 0
let g:airline#extensions#ale#enabled = 1
let g:airline_theme='oceanicnext'

" denite
if has('nvim')

    " Define mappings
    autocmd FileType denite call s:denite_my_settings()
    function! s:denite_my_settings() abort
        nnoremap <silent><buffer><expr> <CR>
                    \ denite#do_map('do_action')
        nnoremap <silent><buffer><expr> p
                    \ denite#do_map('do_action', 'preview')
        nnoremap <silent><buffer><expr> q
                    \ denite#do_map('quit')
        nnoremap <silent><buffer><expr> <Esc>
                    \ denite#do_map('quit')
        nnoremap <silent><buffer><expr> i
                    \ denite#do_map('open_filter_buffer')
        nnoremap <silent><buffer><expr> v
                    \ denite#do_map('do_action','vsplit' )
        nnoremap <silent><buffer><expr> <Space>
                    \ denite#do_map('toggle_select').'j'
    endfunction

    autocmd FileType denite-filter call s:denite_filter_my_settings()
    function! s:denite_filter_my_settings() abort
        " call deoplete#custom#buffer_option('auto_complete', v:false)

        imap <silent><buffer> <Esc>       <Plug>(denite_filter_quit)

        nnoremap <silent><buffer><expr> <Esc>
                    \ denite#do_map('quit')

        inoremap <silent><buffer><expr> <C-v>
                    \ denite#do_map('do_action','vsplit' )
        inoremap <silent><buffer><expr> <C-p>
                    \ denite#do_map('do_action','preview' )

        inoremap <silent><buffer> <C-j>
                    \ <Esc><C-w>p:call cursor(line('.')+1,0)<CR><C-w>pA
        inoremap <silent><buffer> <C-k>
                    \ <Esc><C-w>p:call cursor(line('.')-1,0)<CR><C-w>pA
    endfunction

    call denite#custom#var('file/rec', 'command',
                \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])

    " Change default action.
    call denite#custom#kind('file', 'default_action', 'split')


    " Ag command on grep source
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'default_opts',
                \ ['-i', '--vimgrep'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])

    " Define alias
    call denite#custom#alias('source', 'file/rec/git', 'file/rec')
    call denite#custom#var('file/rec/git', 'command',
                \ ['git', 'ls-files', '-co', '--exclude-standard'])

    " Change ignore_globs
    call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
                \ [ '.git/', '.ropeproject/', '__pycache__/',
                \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])

    call denite#custom#kind('file', 'default_action', 'open')

    let s:menus = {}

    let s:menus.dotfiles = {
                \ 'description': 'Edit your import zsh configuration'
                \ }
    let s:menus.dotfiles.file_candidates = [
                \ ['zshrc', '~/.dotfiles/zsh/.zprezto/runcoms/zshrc'],
                \ ['zshenv', '~/.dotfiles/zsh/.zprezto/runcoms/zshenv'],
                \ ['vim', '~/.dotfiles/vim/vimrc'],
                \ ['nvim', '~/.config/nvim/init.vim'],
                \ ]
    call denite#custom#var('menu', 'menus', s:menus)

    " Custom options for Denite
    "   auto_resize             - Auto resize the Denite window height automatically.
    "   prompt                  - Customize denite prompt
    "   direction               - Specify Denite window direction as directly below current pane
    "   winminheight            - Specify min height for Denite window
    "   highlight_mode_insert   - Specify h1-CursorLine in insert mode
    "   prompt_highlight        - Specify color of prompt
    "   highlight_matched_char  - Matched characters highlight
    "   highlight_matched_range - matched range highlight

    let s:denite_options = {'default' : {
                \ 'auto_resize': 1,
                \ 'source_names': 'short',
                \ 'prompt': 'λ ',
                \ 'highlight_matched_char': 'IncSearch',
                \ 'highlight_matched_range': 'Visual',
                \ 'highlight_window_background': 'Visual',
                \ 'highlight_filter_background': 'DiffAdd',
                \ 'winrow': 1,
                \ 'vertical_preview': 1
                \ }}

    function! s:profile(opts) abort
        for l:fname in keys(a:opts)
            for l:dopt in keys(a:opts[l:fname])
                call denite#custom#option(l:fname, l:dopt, a:opts[l:fname][l:dopt])
            endfor
        endfor
    endfunction

    call s:profile(s:denite_options)
    " catch
    "     echo 'Denite not installed. It should work after running :PlugInstall'
    " endtry
    "
    nnoremap <silent> <C-p> :<C-u>DeniteProjectDir file/rec -start-filter <CR> " -split=floating<CR>
    nnoremap <silent> <C-f> :<C-u>Denite file/rec -start-filter -split=floating<CR>
    nnoremap <silent> <C-b> :<C-u>Denite buffer<CR>
    nnoremap <silent> <C-g> :<C-u>DeniteProjectDir -no-empty grep:::<C-R><C-W><CR>
    nnoremap <silent> <Leader>z :<C-u>Denite menu:dotfiles<CR>
    nnoremap <silent> <Leader>/ :<C-u>Denite line -start-filter<CR>
    nnoremap <silent> <Leader>\ :<C-u>DeniteProjectDir grep<CR>
     " open next result of previous search
    nnoremap <silent> <localleader>j :<C-u>Denite -resume -cursor-pos=+1 -immediately<CR> 
     " resume previous search
    nnoremap <silent> <localleader>J :<C-u>Denite -resume -cursor-pos=+1<CR>

    " highlight link deniteMatchedChar WarningMsg
    " highlight link deniteMatchedRange None
endif

nmap <F8> :TagbarToggle<CR> 

"vimux
map <Leader>tr :call VimuxRunCommand("clear; trial " . expand("%:p"))<CR>
map <Leader>trl :call VimuxRunCommand("!! \n")<CR>

" vim test
nmap <silent> <leader>tt :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>ta :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tg :TestVisit<CR>
let test#strategy = "vimux"
let test#python#runner = 'pytest'
" let test#python#pytest#options = '-s'

" -----------------------------------
"  Misc
"  ----------------------------------

" open quickfix window after grep commands
augroup my_quickfix_window
    autocmd!
    autocmd QuickFixCmdPost *grep* cwindow
augroup END

"<ctrl-s> for saving
noremap <silent> <C-S>          :update<CR>
vnoremap <silent> <C-S>         <C-C>:update<CR>
inoremap <silent> <C-S>         <ESC><C-C>:update<CR><ESC>

"vim expand region
map <localleader>e <Plug>(expand_region_expand)
map <localleader>s <Plug>(expand_region_shrink)

let g:expand_region_text_objects = {
      \ 'iw'  :0,
      \ 'iW'  :0,
      \ 'i"'  :0,
      \ 'i''' :0,
      \ 'i]'  :1,
      \ 'ib'  :1,
      \ 'iB'  :1,
      \ }

call expand_region#custom_text_objects({
      \ 'a]' :1,
      \ 'ab' :1,
      \ 'aB' :1,
      \ })

call expand_region#custom_text_objects('python', {
      \ 'iM' :0,
      \ 'aM' :0,
      \ 'iC' :0,
      \ 'aC' :0
      \ })

"vim-go
let g:go_fmt_command = "goimports"
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"

let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_generate_tags = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_operators = 1
let g:go_highlight_variable_declarations = 1

au FileType go set noexpandtab
au FileType go set shiftwidth=4
au FileType go set softtabstop=4
au FileType go set tabstop=4

autocmd FileType go nmap <Leader>i <Plug>(go-info)
" let g:go_auto_type_info = 1

autocmd FileType go nmap <Leader>d <Plug>(go-def)

" vimwiki
let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}
let g:vimwiki_list = [{'path': '~/.dotfiles/wiki/', 'syntax': 'markdown', 'ext': '.md'}]

nmap <leader>md :MarkdownPreview<CR>
nmap <leader>mc :MarkdownPreviewStop<CR>


let g:highlightedyank_highlight_duration = 100

" Enable spell check for markdown files
au FileType markdown setlocal spell


" COC
"
" use <tab> for trigger completion and navigate to next complete item
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" use <c-space>for trigger completion
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr to confirm completion
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"Close preview window when completion is done.
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

nnoremap <silent> <space>w  :exe 'CocList -I --normal --input='.expand('<cword>').' words'<CR>

" nmap <localleader>di <Plug>(coc-diagnostic-info)
nmap <localleader>p <Plug>(coc-diagnostic-next)
nmap <localleader>n <Plug>(coc-diagnostic-prev)

" autocmd FileType python nmap K :call CocAction("doHover")<CR>
" nmap K :call CocAction("doHover")<CR>
" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

nmap <leader>d <Plug>(coc-definition)
nmap <leader>g <Plug>(coc-declaration)
nmap <leader>r <Plug>(coc-references)

call coc#config('python', {
            \ 'pythonPath': $PYENV_ROOT . "/shims/python"
            \})

call coc#add_extension('coc-json', 'coc-python', 'coc-highlight', 'coc-yaml', 'coc-marketplace')

autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

" Vista

let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
" let g:vista_default_executive = 'coc'
let g:vista#renderer#enable_icon = 1

autocmd FileType vista,vista_kind nnoremap <buffer> <silent> \  :<c-u>call vista#finder#fzf#Run()<CR>

nmap <leader>v :Vista!!<CR>


" echodoc
let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'floating'
" To use a custom highlight for the float window,
" change Pmenu to your highlight group
highlight link EchoDocFloat Pmenu

" table-mode conflicting with vim-test
let g:table_mode_map_prefix = '<Leader>T'


" Disable annoying Ex mode
nnoremap Q <Nop>
