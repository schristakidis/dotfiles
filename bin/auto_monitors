#!/bin/python

from subprocess import run, Popen
from pathlib import Path
from copy import deepcopy
import os
import argparse
import logging
import pprint

from os.path import expanduser
home = expanduser("~")

logging.basicConfig(
    filename=os.path.join(os.path.expanduser("~"), ".cache/auto_monitors.log"),
    filemode='a',
    format='%(asctime)s %(levelname)s %(message)s',
    datefmt='%H:%M:%S',
    level=logging.DEBUG
)

pp = pprint.PrettyPrinter(indent=4)

DOTDIR = Path(os.environ.get('DOTDIR', '.dotfiles'))
DOTBIN = Path(os.environ.get('DOT_BIN', '.dotfiles/bin'))

FEH = f"feh --bg-scale {DOTDIR}/resources/wallpaper/wallpaper5.jpg"
MULTI_SETUP = DOTDIR/'bspwm'/'bspwmrc_multi'
SINGLE_SETUP = DOTDIR/'bspwm'/'bspwmrc_single'


def _get_bspc_output(cmd):
    result = run(cmd.split(), capture_output=True)
    return [r.decode() for r in result.stdout.splitlines()]


def remove_all_rules():
    rules = 'bspc rule -l'
    for rule in _get_bspc_output(rules):
        cmd = ['bspc', 'rule', '-r'] + rule.split()
        run(cmd)


def get_bsp_desktops():
    setup = {}
    cmd = 'bspc query --monitors --names'
    monitors = _get_bspc_output(cmd)
    logging.info(f"BSP MONITORS: {monitors}")

    for monitor in monitors:
        if '.' in monitor:
            monitor = '%' + monitor
        cmd = f'bspc query --desktops -m {monitor}'
        logging.info(cmd)
        desktops = _get_bspc_output(cmd)
        setup[monitor] = desktops

    logging.info(f"BSP DESKTOPS: {setup}")
    return setup


def get_monitors():
    mons = run('mons', capture_output=True).stdout.decode().split('\n')

    laptop = False
    monitors = {}

    for m in mons[2:]:
        if not m:
            continue

        laptop_monitor = False

        monitor = [
            m for m in m.split(':')[1].strip().split(' ') if m and m != '*'
        ]

        name = monitor[0]
        info = monitor[-1]
        status = False
        if 'enabled' in info:
            status = True

        if 'eDP' in name:
            laptop = name
            laptop_monitor = True

        monitors[name] = {'enabed': status, 'laptop': laptop_monitor}

    enabled_monitors = {name: m for name, m in monitors.items() if m['enabed']}

    status = {
        'laptop': laptop,
        'monitors': monitors,
        'enabled_monitors': enabled_monitors,
        'multihead': len(enabled_monitors) > 1
    }

    return status


def relocate_desktops(screen1, screen2):
    if not screen2:
        remove_monitor(screen1)
    else:
        add_monitor(screen1, screen2)


def remove_monitor(solo_monitor):
    logging.info('Removing Monitor')
    setup = get_bsp_desktops()

    if len(setup) == 1:
        logging.info('Nothing to do')
        return

    removed = [m for m in setup.keys() if m != solo_monitor][0]
    logging.info(f"Removed {removed}")

    cmd = f"bspc monitor {removed} -a Desktop"
    run(cmd.split())

    for desktop in setup[removed]:
        cmd = f"bspc desktop {desktop} --to-monitor {solo_monitor}"
        run(cmd.split())

    cmd = f"bspc monitor {removed} --remove"
    run(cmd.split())


def add_monitor(screen1, screen2):
    logging.info(f'Adding monitor {screen1} {screen2}')
    setup = get_bsp_desktops()

    desktops_1 = status.get(screen1, [])
    desktops_2 = status.get(screen2, [])

    if len(desktops_1) == 1:
        for desktop in desktops_1:
            cmd = f"bspc desktop {desktop} --remove"
            run(cmd.split())

    if len(desktops_2) == 1:
        for desktop in desktops_2:
            cmd = f"bspc desktop {desktop} --remove"
            run(cmd.split())

    if screen1 in setup:
        new_monitor = screen2
        existing_monitor = screen1
    elif screen2 in setup:
        new_monitor = screen1
        existing_monitor = screen2
    else:
        return

    for desktop in setup[existing_monitor][5:]:
        cmd = f"bspc desktop {desktop} --to-monitor {new_monitor}"
        run(cmd.split())

    cmd = "bspc desktop Desktop --remove"
    run(cmd.split())


def set_workspaces(status, multi=False, auto=False):
    logging.info(f'Status: {status}')
    log_current_profile()
    laptop = status['laptop']
    monitors = status['monitors']

    if auto:
        multi = status['multihead']

    screen1 = None
    screen2 = None

    env = os.environ.copy()

    if laptop:
        screen1 = laptop
    else:
        screen1 = [name for name in monitors if '2' not in name][0]

    if multi:
        screen2 = [name for name in monitors if name != screen1][0]

    logging.info(f'Setting workspaces: {screen1} {screen2}')
    env['_bspwm_first_screen'] = screen1
    if screen2:
        env['_bspwm_second_screen'] = screen2
        env['_bspwm_dot_second_screen'] = screen2
        if '.' in screen2:
            env['_bspwm_dot_second_screen'] = '%' + screen2

    relocate_desktops(screen1, screen2)

    logging.info(f"First: {env['_bspwm_first_screen']}")
    logging.info(
        f"Second: {env.get('_bspwm_second_screen')} {env.get('_bspwm_dot_second_screen')}"  # noqa
    )
    if multi:
        logging.info('Multi setup')
        err = run((MULTI_SETUP,), capture_output=False, env=env) #.stderr.decode()
        if err:
            logging.error(err)
    else:
        logging.info('Single setup')
        env_single = deepcopy(env)
        if env['_bspwm_first_screen'] == 'eDP-1-1':
            env_single['_bspwm_first_screen'] = 'MONITOR'
        err = run((SINGLE_SETUP,), capture_output=False, env=env_single) #.sderr.decode()
        if err:
            logging.error(err)

    polybar = str(DOTDIR.joinpath('polybar/launch_polybar.sh'))
    logging.info('Launching Polybar')
    run(polybar, capture_output=False, env=env) # .stderr.decode()

    # sleep(2)
    # cm = "xdo raise -n polybar"
    # run(cm.split())

    Popen(FEH.split())


def log_current_profile():
    detected = run(
        ['autorandr', '--detected'], capture_output=True
    ).stdout.decode().strip()
    logging.info(f"Detected Profile: {detected}")


def print_env(status):
    logging.info('Getting status')
    log_current_profile()
    logging.info(status)
    if status['laptop']:
        print('_laptop=1')
    else:
        print('_laptop=')

    if status['multihead']:
        print('_multihead=1')
    else:
        print('_multihead=')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='BSPWM Monitor helper')

    parser.add_argument('--single', action="store_true", default=False)
    parser.add_argument('--mirror', action="store_true", default=False)
    parser.add_argument('--double', action="store_true", default=False)
    parser.add_argument('--export', action="store_true", default=False)

    args = parser.parse_args()
    status = get_monitors()

    logging.info('------------------------')
    logging.info(f'Running: {args}')

    if args.export:
        print_env(status)
    else:
        if args.mirror:
            setup = get_bsp_desktops()
            pp.pprint(status)
            pp.pprint(setup)
        elif args.double:
            set_workspaces(status, multi=True)
        else:
            set_workspaces(status, auto=True)

    logging.info('------------------------')
