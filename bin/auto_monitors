#!/bin/python

from subprocess import run, Popen
from pathlib import Path
import os
import argparse
from time import sleep

DOTDIR = Path(os.environ.get('DOTDIR', '.dotfiles'))
DOTBIN = Path(os.environ.get('DOT_BIN', '.dotfiles/bin'))

FEH = f"feh --bg-scale {DOTDIR}/resources/wallpaper/wallpaper5.jpg"

MULTIPLE_WORKSPACES = [
    'bspc config border_width 4',
    'bspc monitor {} -d       ',
    'bspc monitor {} -d       ',
]

SINGLE_WORKSPACES = (
    'bspc config border_width 2',
    '/usr/bin/bspc monitor -d 1 2 3 4 5 6 7 8 9 10',
)


def get_monitors():
    mons = run('mons', capture_output=True).stdout.decode().split('\n')

    laptop = False
    monitors = {}

    for m in mons[2:]:
        if not m:
            continue

        laptop_monitor = False

        monitor = [
            m for m in m.split(':')[1].strip().split(' ')
            if m and m != '*'
        ]

        name = monitor[0]
        info = monitor[-1]
        status = False
        if 'enabled' in info:
            status = True

        if 'eDP' in name:
            laptop = name
            laptop_monitor = True

        monitors[name] = {
            'enabed': status,
            'laptop': laptop_monitor
        }

    enabled_monitors = {
        name: m
        for name, m in monitors.items() if m['enabed']
    }

    status = {
        'laptop': laptop,
        'monitors': monitors,
        'enabled_monitors': enabled_monitors,
        'multihead': len(enabled_monitors) > 1
    }

    return status


def set_workspaces(status, multi=False):
    laptop = status['laptop']
    monitors = status['monitors']
    enabled_monitors = status['enabled_monitors']

    screen1 = None
    screen2 = None

    env = os.environ.copy()

    if laptop:
        screen1 = laptop
    else:
        screen1 = [
            name for name in monitors if '1' in name
        ][0]

    if not multi:
        cmds = SINGLE_WORKSPACES
    else:
        if laptop:
            screen2 = [name for name in monitors if name != screen1][0]
        else:
            screen2 = [name for name in monitors if name != screen1][0]

        cmds = [
            MULTIPLE_WORKSPACES[-2].format(screen1),
            MULTIPLE_WORKSPACES[-1].format(screen2)
        ]

    env['_bspwm_first_screen'] = screen1
    if screen2:
        env['_bspwm_second_screen'] = screen2

    for cmd in cmds:
        run(cmd.split(), capture_output=False, env=env)

    polybar = str(DOTDIR.joinpath('polybar/launch_polybar.sh'))
    run(polybar, capture_output=False, env=env)

    sleep(2)
    cm = "xdo raise -n polybar"
    run(cm.split())

    Popen(FEH.split())

def print_env(status):
    if status['laptop']:
        print('_laptop=1')
    else:
        print('_laptop=')

    if status['multihead']:
        print('_multihead=1')
    else:
        print('_multihead=')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='BSPWM Monitor helper')

    parser.add_argument('--single', action="store_true", default=False)
    parser.add_argument('--mirror', action="store_true", default=False)
    parser.add_argument('--double', action="store_true", default=False)
    parser.add_argument('--export', action="store_true", default=False)

    args = parser.parse_args()
    status = get_monitors()

    if args.export:
        print_env(status)
    else:
        if args.double:
            set_workspaces(status, multi=True)
        else:
            set_workspaces(status)
