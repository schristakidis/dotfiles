#!/bin/python

import json
from subprocess import run
from pathlib import Path
import os
import argparse
import logging
import pprint

from os.path import expanduser
home = expanduser("~")

logging.basicConfig(
    filename=os.path.join(os.path.expanduser("~"), ".cache/hypr_monitors.log"),
    filemode='a',
    format='%(asctime)s %(levelname)s %(message)s',
    datefmt='%H:%M:%S',
    level=logging.DEBUG
)

pp = pprint.PrettyPrinter(indent=4)

DOTDIR = Path(os.environ.get('DOTDIR', '.dotfiles'))
WAYBAR_TEMPLATE = DOTDIR.joinpath('waybar/workspace_template.json')
WAYBAR_DEST = DOTDIR.joinpath('tmp/workspaces.jsonc')


HYPR_MONITOR_CONF = DOTDIR.joinpath('tmp/monitors.conf')


def get_simple_monitor_info(mon):
    m_info = {
        'name': mon['name'],
        'res': f"{mon['width']}x{mon['height']}@{int(mon['refreshRate'])}",
        'laptop': 'eDP-1' in mon['name']
    }
    return m_info


def reload():
    cmd = 'hyprctl reload'
    run(cmd.split())


class HMonitors:
    def __init__(self, single):
        self.single = single
        self.hypr_conf_workspaces = []
        self.hypr_conf_monitors = []
        self.waybar_conf = None

    def run(self):
        self.kill_waybar()
        self.get_monitors()
        if len(self.monitors) == 1:
            print('Single')
            self.single_setup()
        elif self.single:
            print('Forced')
            self.force_single_setup()
        else:
            print('Multi')
            self.multi_setup()
        self.write_hypr_conf()
        self.write_waybar_conf()
        reload()

    def kill_waybar(self):
        cmd = 'pkill waybar'
        run(cmd.split())

    def get_monitors(self):
        cmd = 'hyprctl monitors -j'
        output = run(cmd.split(), text=True, capture_output=True).stdout
        self.monitors = json.loads(output)
        logging.info(f'Current Monitors: {self.monitors}')

    def single_setup(self):
        logging.info('Singe Setup')
        m_info = get_simple_monitor_info(self.monitors[0])

        logging.info(f'Monitor info: {m_info}')

        self.hypr_monitor_conf(m_info['name'], m_info['res'], 1, 10)
        self.create_waybar_conf(m_info['name'], m_info['name'])

        self.move_workspaces(1, 10, m_info['name'])

    def get_order(self):
        mon1 = get_simple_monitor_info(self.monitors[0])
        mon2 = get_simple_monitor_info(self.monitors[1])

        if mon1['laptop']:
            second = mon1
            first = mon2
        else:
            first = mon1
            second = mon2

        return first, second

    def force_single_setup(self):
        logging.info('Forcing Singe Setup')

        first, second = self.get_order()

        self.hypr_monitor_conf(second['name'], second['res'], 1, 10)
        self.hypr_conf_monitors += [f"monitor = {first['name']},disable"]

        self.create_waybar_conf(second['name'], second['name'])
        self.move_workspaces(1, 10, second['name'])

    def multi_setup(self):
        logging.info('Multi setup')
        first, second = self.get_order()

        self.hypr_monitor_conf(first['name'], first['res'], 1, 5)
        self.hypr_monitor_conf(second['name'], second['res'], 6, 10)

        self.create_waybar_conf(first['name'], second['name'])
        self.move_workspaces(1, 5, first['name'])
        self.move_workspaces(6, 10, second['name'])

    def hypr_monitor_conf(self, name, res, start, end):
        self.hypr_conf_monitors += [f"monitor = {name},{res},auto,1"]

        for i in range(start, end+1):
            self.hypr_conf_workspaces.append(
                f"workspace = {i}, monitor:{name}"
            )

    def create_waybar_conf(self, first_monitor, second_monitor):
        with open(WAYBAR_TEMPLATE) as f:
            self.waybar_conf = json.load(f)

        workspaces = self.waybar_conf['hyprland/workspaces']

        for i in range(1, 6):
            workspaces['persistent_workspaces'][str(i)] = [first_monitor]

        for i in range(6, 11):
            workspaces['persistent_workspaces'][str(i)] = [second_monitor]

    def move_workspaces(self, first, last, monitor):
        for workspace in range(first, last+1):
            cmd = f'hyprctl dispatch moveworkspacetomonitor {workspace} {monitor}'  # noqa
            print(cmd)
            run(cmd.split())

    def write_hypr_conf(self):
        with open(HYPR_MONITOR_CONF, 'w') as f:
            f.writelines('\n'.join(self.hypr_conf_monitors))
            f.write('\n')
            f.writelines('\n'.join(self.hypr_conf_workspaces))

    def write_waybar_conf(self):
        with open(WAYBAR_DEST, 'w') as f:
            json.dump(self.waybar_conf, f)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='BSPWM Monitor helper')

    parser.add_argument('--single', action="store_true", default=False)
    # parser.add_argument('--multi', action="store_true", default=False)
    # parser.add_argument('--double', action="store_true", default=False)
    # parser.add_argument('--export', action="store_true", default=False)

    args = parser.parse_args()
    HMonitors(args.single).run()
