#!/bin/python

from subprocess import run, Popen
from pathlib import Path
import os
import argparse

DOTDIR = Path(os.environ.get('DOTDIR', '.dotfiles'))
DOTBIN = Path(os.environ.get('DOT_BIN', '.dotfiles/bin'))

FEH = f"feh --bg-scale {DOTDIR}/resources/wallpaper/wallpaper5.jpg"

MULTIHEAD_WORKSPACES = [
    'bspc monitor {} -d       ',
    'bspc monitor {} -d       ',
]

MULTIHEAD_CONFIGS = [
    'bspc config border_width 4',
    "bspc rule -a Evolution desktop='^5' focus=on",
    "bspc rule -a Slack desktop='^5' focus=on"
]

SINGLE_WORKSPACES = [
    'bspc monitor -d 1 2 3 4 5 6 7 8 9 10',
]

SINGLE_CONFIGS = [
    'bspc config border_width 2',
    "bspc rule -a Slack desktop='^9' focus=on",
    "bspc rule -a Evolution desktop='^10' focus=on"
]


def get_monitors():
    mons = run('mons', capture_output=True).stdout.decode().split('\n')

    laptop = False
    monitors = {}

    for m in mons[2:]:
        if not m:
            continue

        laptop_monitor = False
        monitor = m.split(':')[1].strip().split(' ')
        name = monitor[0]
        info = monitor[-1]
        status = False
        if 'enabled' in info:
            status = True

        if 'eDP-1' in name:
            laptop = True
            laptop_monitor = True

        monitors[name] = {
            'enabed': status,
            'laptop': laptop_monitor
        }

    status = {
        'laptop': laptop,
        'monitors': monitors,
        'multihead': len(monitors) > 1
    }

    return status


def set_workspaces(status):
    multihead = status['multihead']
    laptop = status['laptop']
    monitors = status['monitors']

    if multihead:
        if laptop:
            run(str(DOTDIR.joinpath('screenlayouts/p1_multi.sh')))
        else:
            run(str(DOTDIR.joinpath('screenlayouts/mps.sh')))
    else:
        run(str(DOTDIR.joinpath('screenlayouts/p1.sh')))

    env = os.environ.copy()

    if multihead:
        if laptop:
            screen1 = [
                name for name, state in monitors.items()
                if state['laptop']
            ][0]
            screen2 = [name for name in monitors if name != screen1][0]
        else:
            screen1 = [
                name for name in monitors if '1' in name
            ][0]
            screen2 = [name for name in monitors if name != screen1][0]

        env['_bspwm_first_screen'] = screen1
        env['_bspwm_second_screen'] = screen2
    else:
        env['_bspwm_first_screen'] = list(monitors.keys())[0]

    if multihead:
        cmds = [
            MULTIHEAD_WORKSPACES[0].format(env['_bspwm_first_screen']),
            MULTIHEAD_WORKSPACES[1].format(env['_bspwm_second_screen'])
        ]
        cmds = cmds + MULTIHEAD_CONFIGS
    else:
        cmds = SINGLE_WORKSPACES + SINGLE_CONFIGS

    for cmd in cmds:
        run(cmd.split(), capture_output=False, env=env)

    polybar = str(DOTDIR.joinpath('polybar/launch_polybar.sh'))
    run(polybar, capture_output=False, env=env)

    Popen(FEH.split())


def print_env(status):
    if status['laptop']:
        print('_laptop=1')

    if status['multihead']:
        print('_multihead=1')


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='BSPWM Monitor helper')

    parser.add_argument('--manual', action="store_true", default=False)
    parser.add_argument('--export', action="store_true", default=False)

    args = parser.parse_args()

    status = get_monitors()
    if args.export:
        print_env(status)
    else:
        set_workspaces(status)
